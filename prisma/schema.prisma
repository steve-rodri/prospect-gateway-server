// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int            @id @default(autoincrement())
  uid                   String         @unique
  email                 String         @unique
  walletBalance         Decimal?       @default(0) @db.Money
  holdings              Holding[]
  competitionUserOne    Competition[]  @relation(name: "competitionUserOne")
  competitionUserTwo    Competition[]  @relation(name: "competitionUserTwo")
  notificationSender    Notification[] @relation(name: "notificationSender")
  notificationRecipient Notification[] @relation(name: "notificationRecipient")
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
}

model CompetitionType {
  id             Int           @id @default(autoincrement())
  name           String        @db.VarChar(40)
  athleteLimit   Int?
  moneyLimit     Decimal?
  durationInDays Int?
  competition    Competition[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Competition {
  id                Int                  @id @default(autoincrement())
  competitionTypeId Int
  userOneId         Int
  userTwoId         Int
  active            Boolean              @default(true)
  startTime         DateTime             @default(now())
  endTime           DateTime?
  competitionType   CompetitionType      @relation(fields: [competitionTypeId], references: [id])
  athletes          AthleteCompetition[]
  userOne           User?                @relation(fields: [userOneId], references: [id], name: "competitionUserOne")
  userTwo           User?                @relation(fields: [userTwoId], references: [id], name: "competitionUserTwo")
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
}

model Athlete {
  id           Int                  @id @default(autoincrement())
  name         String               @db.VarChar(50)
  age          Int
  position     String               @db.VarChar(5)
  photoUri     String
  teamAbbr     String               @db.VarChar(5)
  draftPick    String
  statistics   AthleteStatistics?
  stock        AthleteStock?
  userHoldings Holding[]
  competitions AthleteCompetition[]
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
}

model AthleteStatistics {
  athlete         Athlete  @relation(fields: [athleteId], references: [id])
  athleteId       Int      @unique
  pointAverage    Decimal?
  reboundAverage  Decimal?
  assistAverage   Decimal?
  blockAverage    Decimal?
  stealAverage    Decimal?
  turnoverAverage Decimal?
}

model AthleteStock {
  athlete      Athlete         @relation(fields: [athleteId], references: [id])
  athleteId    Int             @unique
  ipo          Decimal
  icp          AthleteStockICP
  priceHistory StockPrice[]
}

model AthleteCompetition {
  athlete       Athlete     @relation(fields: [athleteId], references: [id])
  athleteId     Int
  competition   Competition @relation(fields: [competitionId], references: [id])
  competitionId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@id([athleteId, competitionId])
}

model Holding {
  id           Int      @id @default(autoincrement())
  userId       Int
  athleteId    Int
  shareAmt     Float
  purchaseDate DateTime
  user         User     @relation(fields: [userId], references: [id])
  athlete      Athlete  @relation(fields: [athleteId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model StockPrice {
  id           Int          @id @default(autoincrement())
  athleteStock AthleteStock @relation(fields: [athleteId], references: [athleteId])
  athleteId    Int
  date         DateTime
  price        Decimal      @db.Money
}

model Notification {
  id          Int                @id @default(autoincrement())
  type        NotificationType
  senderId    Int
  recipientId Int
  status      NotificationStatus @default(pending)
  sender      User?              @relation(name: "notificationSender", fields: [senderId], references: [id])
  recipient   User?              @relation(name: "notificationRecipient", fields: [recipientId], references: [id])
  dateSent    DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

enum NotificationType {
  Competition
  FriendRequest
}

enum NotificationStatus {
  rejected
  pending
  success
}

enum AthleteStockICP {
  RolePlayer
  AllStar
  Starter
  Generational
  Superstar
  Star
}
